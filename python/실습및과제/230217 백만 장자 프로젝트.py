# [문제]
# 25년 간의 수행 끝에 원재는 미래를 보는 능력을 갖게 되었다. 이 능력으로 원재는 사재기를 하려고 한다.
# 다만 당국의 감시가 심해 한 번에 많은 양을 사재기 할 수 없다.
# 다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.
#     1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
#     2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
#     3. 판매는 얼마든지 할 수 있다.
# 예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.

# [입력]
# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
# 각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,
# 둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.
# 각 날의 매매가는 10,000이하이다.

# [출력]
# 각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고, 최대 이익을 출력한다.

# [예제 풀이]
# 1번째 케이스는 아무 것도 사지 않는 것이 최대 이익이다.
# 2번째 케이스는 1,2일에 각각 한 개씩 사서 세 번째 날에 두 개를 팔면 10의 이익을 얻을 수 있다.

# import sys
# sys.stdin = open('230217 백만 장자 프로젝트.txt', 'r')
'''
# [문제풀이]
# 0. 사재기를 하겠다는 원재녀석을 도와줘야하는 문제이다.
# 0-1. 우선 조건으로 'N일 동안의 물건 매매가를 알고' 있지만, 감시망으로 인해 '하루에 1개 만 구매가 가능'하다., 파는건 제한 없다.
# 0-2. 판매는 사고 난 뒤 언제든지 가능, 매매가는 10,000이하이므로
# 0-3. 예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.
# 0-3-1. 1일에 1원에 1개 구매, 2일에 2원에 1개 구매, 3일에 3원애 구매했던 2개를 판매하면 3원의 이익을 얻을 수 있으니까.
# 1. 하나씩 밖에 구매못하므로 갯수는 신경쓰지 말고, 갯수만을 생각해두자.
# 2. 각 날마다 가격을 비교해보고 만일 갈수록 가격이 낮아지거나 같아진다면 구매할 필요가 없다.
# 2-1. 따라서 d날의 가격과 d날이후의 가격을 비교해보고, 각각 제일 비싼때 파는 것이 이득이다.
# 2-2. 2-1에 따라 [i]날의 가격과 [i+1]~[N-1]의 가격을 비교, [i+1]의 가격과 [N-1]의 가격을 비교하고
# 2-3. 만약 [i]날의 가격이 [i+1]~[N-1]의 가격보다 싸다면, 구매한후 [i+1]~[N-1] 중 제일 비싼 날에 판매하도록 한다.

T = int(input())
for testcase in range(1, T+1):
    N = int(input())                                    # 원재가 볼 수 있는 미래 일 수
    future_price = [0]+list(map(int,input().split()))   # 미래가격을 입력 받아 리스트화 하기, [0]붙인 이유는 보기 편하려고
    profit = 0                                          # 원재가 벌어들인 수익

    for buy_d in range(1,N):                            # buy_d를 인자로해서 구매하려는 날짜의 가격확인
                                                        # N일째는 볼필요가 없으니까(1,N)의 이유는 보기편하려고
        max_price = 0                                   # 가장 비싼가격을 확인하기 위한 변수
        for sell_d in range(buy_d+1, N+1):              # sell_d를 인자로해서 판매하려는 날짜의 가격확인
            if max_price < future_price[sell_d]:        # 만약 '해당 미래날 가격'이 현재까지의 나온 최댓가격보다 크다면
                max_price = future_price[sell_d]        # 판매 가능한 최대가격을 조정하기
        if future_price[buy_d] < max_price:             # 구매하는 날의 가격이 maxprice보다 작다면
            profit += (max_price - future_price[buy_d]) # 현재 수익에 최댓가격-구매가격을 한 값을 추가하기
    print(f'#{testcase} {profit}')
 
#  N=7
#  0 1 2 3 4 5 6    7
#  0 1 2 3 4 5 N-1, N
# [0,1,2,3,4,5,6,   7]
'''

# import sys
# sys.stdin = open('230217 백만 장자 프로젝트.txt', 'r')
# [문제풀이]
# 0. 사재기를 하겠다는 원재녀석을 도와줘야하는 문제이다.
# 0-1. 우선 조건으로 'N일 동안의 물건 매매가를 알고' 있지만, 감시망으로 인해 '하루에 1개 만 구매가 가능'하다., 파는건 제한 없다.
# 0-2. 판매는 사고 난 뒤 언제든지 가능, 매매가는 10,000이하이므로
# 0-3. 예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.
# 0-3-1. 1일에 1원에 1개 구매, 2일에 2원에 1개 구매, 3일에 3원애 구매했던 2개를 판매하면 3원의 이익을 얻을 수 있으니까.
# 1. 하나씩 밖에 구매못하므로 갯수는 신경쓰지 말고, 갯수만을 생각해두자.
# 2. 각 날마다 가격을 비교해보고 만일 갈수록 가격이 낮아지거나 같아진다면 구매할 필요가 없다.
# 2-1. 따라서 d날의 가격과 d날이후의 가격을 비교해보고, 각각 제일 비싼때 파는 것이 이득이다.
# 2-2. 2-1에 따라 [i]날의 가격과 [i+1]~[N-1]의 가격을 비교, [i+1]의 가격과 [N-1]의 가격을 비교하고
# 2-3. 만약 [i]날의 가격이 [i+1]~[N-1]의 가격보다 싸다면, 구매한후 [i+1]~[N-1] 중 제일 비싼 날에 판매하도록 한다.
# 3. 2.의 방법은 실패.
# 3-1. 확인 하는 날 중 제일 비싼 날을 확인, 그리고 제일 비싼날 +1~ N중 제일 비싼날 이런 식으로 확인
# 3-2. 0 ~ 제일 비싼날, 제일 비싼날+1~ 그다음 제일 비싼날, 그 다음 제일 비싼날+1 ~ 또 그다음 제일 비싼날....
# 3-3. 3-2의 방법으로 확인해보기


# 수익 창출하는 함수
def million(future_price, start, end):
    global profit                                       # global profit을 받아옴으로 profit에 이상이 없게하기
    if start == end:                                    # 시작하는 날과 마지막날이 같으면 확인할 필요가 없으니까
        return                                          # 돌아가기
    # 수익 창출 하는 방법
    max_price = 0
    max_day = 0
    for i in range(start, end):                         # start~end까지 돌리고
        if max_price < future_price[i]:                 # future_price[i]가 최대가격보다 크면
           max_price = future_price[i]                  # max_price를 future_price로 변경
           max_day = i                                  # 가장 비싼 날을 i로 정한다.
    for j in range(start, max_day+1):                   # 가장 비싼 날까지는 열심히 사모아다가
        profit += max_price - future_price[j]           # 가장 비싼 날에 하나하나 팔아야지.
    million(future_price, max_day+1, end)               # 이제 가장 비싼 날의 다음날 부터 끝 날 까지 또 확인해보자.
    return profit                                       # 모든게 끝났으면 수익을 반환


# 값 입력 받기
T = int(input())
for testcase in range(1, T+1):                          # 입력받기
    N = int(input())                                    # 원재가 볼 수 있는 미래 일 수
    future_price = list(map(int,input().split()))       # 미래가격을 입력 받아 리스트화 하기, [0]붙인 이유는 보기 편하려고
    profit = 0                                          # 원재가 벌어들인 수익

    one_profit = million(future_price, 0, N)            # one재가 벌어들이 수익을 나타낼 변수
    print(f'#{testcase} {one_profit}')                  # 출력