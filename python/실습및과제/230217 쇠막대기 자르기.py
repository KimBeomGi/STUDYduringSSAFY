import sys
sys.stdin = open('230217 쇠막대기 자르기.txt', 'r')


# [문제풀이]
# 여러 개의 쇠막대기를 레이저로 절단하려고 한다.
# 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다.
# 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.
#  - 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다.
#  - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
#  - 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
#  - 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.
# 아래 그림은 위 조건을 만족하는 예를 보여준다.
# 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.

# 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.
#     1. 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 “()” 으로 표현된다. 또한, 모든 “()”는 반드시 레이저를 표현한다.

#     2. 쇠막대기의 왼쪽 끝은 여는 괄호 ‘(’ 로, 오른쪽 끝은 닫힌 괄호 ‘)’ 로 표현된다.
# 위 예의 괄호 표현은 그림 위에 주어져 있다.
# 쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고,
# 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.
# 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하라.
# [입력]
# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
# 각 테스트 케이스의 첫 번째 줄에는 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다.

# [출력]
# 각 테스트 케이스마다 #T를 출력하고 한 칸을 띄운 후, 잘려진 조각의 총 개수를 출력한다.

# [문제풀이]
# 0. 레이저로 쇠막대기를 잘라내어 쇠막대기가 총 몇조각 나느냐가 원론적인 문제이다.
# 0-1. 모두 괄호로 표현되어있지만 '()'는 레이저  따로 있다면 '('는 쇠막대기를 추가 ')'는 쇠막대기를 빼는 작업으로 보면 된다.
# 1. 이 작업은 작업대위에 올려서 작업을 한다고 생각하고 진행해보자.
# 1-1. 열린괄호 '('를 만나게 된다면 작업대 위에 쇠막대를 하나 추가하는 것이고, 닫힌괄호 ')'를 만나게 된다면 작업대에서 쇠막대를 빼는 것이다.
# 1-2. 레이저 '()'를 만나게 된다면 현재 작업대 위에 올려진 쇠막대기의 갯수만큼 쇠막대가 더 생성되는 것이다.
# 2. 따라서 1.의 내용들에 의해서 '쇠막대를 작업대 위에 올리는 변수', 작업대를 벗어난 '총 쇠막대 갯수'를 세아리면 된다.


T = int(input())
for testcase in range(1,T+1):
    blacksmith = input()                    # 작업하는 공간이니 blacksmith라는 변수로 입력값을 입력받음
    on_table = 0                            # 현재 작업하고 있는 작업대 위에 올려져있는 쇠막대기 수
    iron_bar = 0                            # 작업을 하고난 후 생성된 쇠막대기 수
    N = len(blacksmith)                     # N은 blacksmith에 입력받은 문자열의 길이
    
    
    i = 0                                   # while문에 이용할 i 인자
    while i < N:                            # while문을 0~(N-1)까지 반복할 것이다.
        if blacksmith[i] == '(' and blacksmith[i+1] == ')':         # blacksmith에서 레이저를 만났을 때
            iron_bar += on_table            # 작업대 위에 올려져있는 쇠막대기 수만큼 쇠막대기 생성
            i += 2                          # '('과 ')' 가 같이 레이저로 표현되어있으니 이것은 볼 필요가 없으므로 i +2로 넘어감
        elif blacksmith[i] == '(':          # '(' 작업대 위에 쇠막대기를 올리는 것이므로
            on_table += 1                   # 작업대 위에 쇠막대기를 하나 올리고
            i += 1                          # 다음 문자를 읽으러 감
        elif blacksmith[i] == ')':          # ')' 작업대 위에 있는 쇠막대기를 빼는 것이자, 작업대 밖을 기준으로 쇠막대기가 생성된 것이므로
            on_table -= 1                   # 작업대 위에 있는 쇠막대기를 하나 빼고
            iron_bar += 1                   # 이 빼낸 쇠막대기는 작업대 밖 기준 쇠막대기 생성으로 보므로 iron_bar에 +1
            i += 1                          # 다음 문자를 읽으러 감

    print(f'#{testcase} {iron_bar}')