

# 여러 개의 쇠막대기를 레이저로 절단하려고 한다.
# 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다.
# 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.

#  - 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다.
#  - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
#  - 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
#  - 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.

# 아래 그림은 위 조건을 만족하는 예를 보여준다.
# 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.
# 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.

#     1. 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 “()” 으로 표현된다. 또한, 모든 “()”는 반드시 레이저를 표현한다.

#     2. 쇠막대기의 왼쪽 끝은 여는 괄호 ‘(’ 로, 오른쪽 끝은 닫힌 괄호 ‘)’ 로 표현된다.
# 위 예의 괄호 표현은 그림 위에 주어져 있다.
# 쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고,
# 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.
# 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하라.

# [입력]
# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
# 각 테스트 케이스의 첫 번째 줄에는 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다.

# [출력]
# 각 테스트 케이스마다 #T를 출력하고 한 칸을 띄운 후, 잘려진 조각의 총 개수를 출력한다.

import sys
sys.stdin = open('230214 쇠막대기.txt', 'r')

# [문제풀이]
# 0. '()'로 되어있으면 레이저가 발사되는 곳이며, '(' 부분은 막대기의 시작 ')'부분은 막대기의끝이다.
# 0-1. 따라서 생각을 '('는 막대기를 올려놓는다고 생각하고 ')'는 막대기를 치운다고 생각해보자.
# 1. 우선 작업대 위에서 작업을 한다 생각해보자.
# 1-1. 막대기를 올리면 막대기가 작업대에 올려진다.
# 1-2. 레이저로 현재 작업대 위에 올려진 막대기들을 잘라내면 현재 작업대 위에 올려진 만큼 막대기가 추가 생성된다.
# 1-3. 1-2의 작업이 끝나게 되어, 작업대 위에서 막대기를 치워내면, 작업대에는 치운 막대기 만큼 없어지고,
# 1-3-1. 생성은 아니지만 치운 막대기 또한 막대기의 갯수에 포함되므로 1-2.에서 생성된 막대기에 + 해주면 된다.
# 2. 1의 내용에 따라서 2가지 변수가 필요하다. 현재 작업중인 막대기, 생성된 막대기. 이 2 변수를 활용해보자.

T = int(input())
for testcase in range(1, T+1):
    forge = list(map(str, input()))                         # 주어지는 ()값들을 받는다. 쇠막대기라길래 forge라는 변수에 넣어봤다.
    forge.append(0)                                         # forge 리스트 마지막에 0이라는 값을 넣어 차후 이용할 수 있게 한다.
    save_index = len(forge)                                 # 인덱스를 활용하기위해 forge변수의 길이를 구한다.
    now_working = 0                                         # 현재 작업중인 막대기 갯수
    created_iron = 0                                        # 작업결과 만들어진 막대기수(참고:  여기선 막대기 1개가 레이저 2번 맞으면 3개됨)

    # 대장간 가동
    i = 0                                                   # while문을 이용하기 위한 i변수, 중간에 2칸을 건너뛰어야하기 때문에 while문 이용
    while i < save_index-1:                                 #forge의 길이만큼 반복문을 생성해준다. 단, 소괄호가 있는부분만 작동하기위해 save_index-1해줬음
        if forge[i] == '(' and forge[i+1] == ')':           # 온전한 소괄호가 나오면 레이저가 발사되는 것이므로
            created_iron += now_working                     # 작업대에 올라가있는 갯수만큼 쇠막대기가 생성된다.
            i += 2                                          # 온전한 소괄호를 건너뛰어야 제대로 해당 입력값을 읽어낼수 있으므로 +2칸 해줌
        elif forge[i] == '(':                               # 열린괄호면 작업대에 쇠막대기를 올려야하니
            now_working += 1                                # 작업대에 쇠막대기를 +1 해준다.
            i+=1                                            # 열린 괄호에 대한 내용 확인했으니, 다음 칸 확인
        elif forge[i] == ')':                               # 닫힌괄호라면 해당 쇠막대기의 작업을 그만두고 치우는 것이므로
            now_working -= 1                                # 작업대에서 쇠막대기를 치우므로 -1 해주고
            created_iron += 1                               # 치운 쇠막대기도 작업물 중 1개 이므로 created_iron에 +1해준다.
            i+=1                                            # 닫힌 괄호에 대한 내용 확인했으니, 다음 칸 확인
    print(f'#{testcase} {created_iron}')