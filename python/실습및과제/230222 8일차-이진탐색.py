

# 1부터 N까지의 자연수를 이진 탐색 트리에 저장하려고 한다.
# 이진 탐색 트리는 어떤 경우에도 저장된 값이 왼쪽 서브트리의 루트 <현재 노드 <오른쪽 서브 트리의 루트인 규칙을 만족한다.
# 추가나 삭제가 없는 경우에는, 완전 이진 트리가 되도록 만들면 효율적인 이진 탐색 트리를 만들수 있다.
# 다음은 1부터 6까지의 숫자를 완전 이진 트리 형태인 이진 탐색 트리에 저장한 경우이다.

# 완전 이진 트리의 노드 번호는 루트를 1번으로 하고 아래로 내려가면서 왼쪽에서 오른쪽 순으로 증가한다.
# N이 주어졌을 때 완전 이진 트리로 만든 이진 탐색 트리의 루트에 저장된 값과, N/2번 노드(N이 홀수인 경우 소수점 버림)에 저장된 값을 출력하는 프로그램을 만드시오.

# [입력]
# 첫 줄에 테스트케이스의 수 T가 주어진다. 1<=T<=50
# 다음 줄부터 테스트 케이스의 별로 N이 주어진다. 1<=N<=1000

# [출력]
# 각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤, 답을 출력한다.

import sys
sys.stdin = open('230222 8일차-이진탐색.txt','r')

# [문제풀이]
# 0. 1~ N까지의 자연수를 이진 탐색 트리에 저장. 왼쪽 서브에서 부터 중앙, 오른쪽 서브로 추가.
# 0-1. 루트에 저장된 값과 N/2번 노드(=N//2)에 저장된 값을 출력
# 1. 해당 문제는 값을 저장하는 것은 중위 순회로 값을 저장하며,
# 1-2. 번호를 매기는 것은 BFS?


def inorder(T):                 # 중위 순회, 이 때, T는 노드 번호임
    global num                  # global에서 num을 가져옴
    if T > N:                   # T > N보다 크다면
        return                  # return해서 나를 부른 곳으로 돌아가기
    inorder(T*2)                # 왼쪽 자식 노드 재귀로 함수를 실행, 노드 번호가 T*2인 곳에 대해 실행
    tree[T] = num               # treep[T]는 num으로 할당
    num += 1                    # num에 +1 (이유는 순회하면서 들어갈 값들이 계속 증가하니까)
    inorder(T*2 +1)             # 왼쪽 자식 노드 재귀로 함수를 실행, 노드 번호가 T*2+1인 곳에 대해 실행

T = int(input())
for testcase in range(1, T+1):  # 테스트케이스 수 만큼 돌림
    N = int(input())            # 노드의 수를 입력받음
    tree = [0]*(N+1)            # 트리를 받음 여기서 인덱스가 노드의 번호가 되며, 값은 노드가 가지는 값이 됨
    num = 1                     # 함수 안에 값을 넣어 줄 때 사용해주기 위함
    inorder(1)                  # 함수 실행(이 때 1은 노드의 번호임)

    print(f'#{testcase} {tree[1]} {tree[N//2]}')
    