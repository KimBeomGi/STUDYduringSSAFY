
# [문제]
# 우주선 싸피2호는 화성에 착륙해 주변 사진을 찍어 전송하는 임무를 갖고 있으며,
# 착륙 지점을 중심으로 주변 8개 구역을 대상으로 착륙지점보다 높이가 낮은 구역의 사진을 찍을 수 있다. 
# 싸피 1호가 측정한 높이 정보를 이용하면 최적의 착륙장소를 정할 수 있지만, 
# 폭풍 등 극한상황을 대비한 예비후보지를 정하려 하는데, 예비 후보지는 8개의 방향 중 사진을 찍을 수 있는 방향이 4방향 이상인 지점으로 정하려고 한다. 
# 싸피 1호가 측정한 높이 정보가 주어질 때, 예비 후보지의 수를 알아내는 프로그램을 만드시오. 
# 주변에 높이 정보가 없는 영역이 포함되어 있어도, 알려진 영역의 높이만 조건을 만족하면 후보지에 포함된다.

# 다음과 같은 지형은 착륙지 높이(2)보다 낮은 지역이 2곳 밖에 없으므로 후보지가 될 수 없다.

# 1 2 3
# 4 2 4
# 3 2 1

# 다음의 경우 착륙지 높이(3)보다 낮은 지역이 총 4곳이므로 후보지에 포함한다.

# 1 2 3
# 4 3 5
# 3 2 1

# 입력
# 검토해야할 구역의 개수 T가 첫 줄에 주어진다. 다음 줄부터 첫 줄에 구역의 크기 N, M이 주어지고, 다음 줄부터 N줄에 걸쳐, M개 씩의 높이 정보 Aij가 제공된다.
# 3<=N, M<=100, 0

# 출력
# #과 1번부터 시작하는 구역번호, 빈칸에 이어 조건을 만족하는 예비 후보지의 개수를 출력한다.

import sys
sys.stdin = open('230217 우주선착륙2.txt', 'r')

# [문제풀이]
# 0. 주어지는 구역에서 예비후보지로 적합한 곳의 갯수를 구하는 문제이다.
# 0-1. 총 8개의 방향을 확인했을 때 4 곳 이상을 사진을 찍을 수 있어야만 가능하다.
# 1. 델타변수를 이용해 주변을 확인해보도록 하고 사진가능 구역이 4곳 이상이면 착륙 가능지역에 +1하자.

T =  int(input())
for testcase in range(1,T+1):
    N, M = map(int, input().split())                                    # 행의 갯수 N과 열의 갯수 M을 입력받음
    area = [list(map(int, input().split())) for _ in range(N)]          # 행의 갯수 N만큼 리스트로 입력받아 행렬로 만듬
    landing = 0                                                         # 착륙 가능한 지점의 갯수를 나타낼 변수 landing
    # 상,하,좌,우,좌상,우상,좌하,우하
    dr = [-1, 1, 0, 0, -1, -1, 1, 1]                                    # 행에 대한 델타
    dc = [0, 0, -1, 1, -1, 1, -1, 1]                                    # 열에 대한 델타

    # while문을 이용해보자.
    row = 0                                                             # while문 이용해야하니까 row 변수를 따로 할당
    column = 0                                                          # while문 이용해야하니까 column 변수를 따로 할당
    while 0 <= row < N and 0 <= column < M:                             # 0~ N-1, 0~M-1 까지만 작동하도록 하는 while 반복문
        how_many_pic = 0                                                # 사진 촬영 가능한 구간 갯수 변수
        for delta in range(8):                                          # 델타를 돌아가면 8구간을 확인하기 위함
            if 0 <= row+dr[delta] < N and 0 <= column+dc[delta] < M and area[row][column] > area[row+dr[delta]][column+dc[delta]]:
            # 보려는 방향이 범위 내에 있고 보려는 해당 위치가 내 위치 보다 낮다면
                how_many_pic += 1                                       # 사진 촬영 가능 구간에 +1 해라
        if how_many_pic >= 4:                                           # 사진 촬영 가능한 구간이 4개 이상이면
            landing += 1                                                # 착륙 가능한 지점의 갯수에 +1
        column += 1                                                     # 해당 행의 열은 확인 끝났으니 column +1
        if column == M:                                                 # 만약 column이 M이 되었다면, 쓸 수 없으니
            column = 0                                                  # 열 값 column을 0으로 초기화
            row += 1                                                    # 그리고 다음행으로 넘어가기
    print(f'#{testcase} {landing}')
