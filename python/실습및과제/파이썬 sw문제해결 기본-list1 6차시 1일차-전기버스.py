# A도시는 전기버스를 운행하려고 한다. 전기버스는 한번 충전으로 이동할 수 있는 정류장 수가 정해져 있어서, 중간에 충전기가 설치된 정류장을 만들기로 했다.
# 버스는 0번에서 출발해 종점인 N번 정류장까지 이동하고, 한번 충전으로 최대한 이동할 수 있는 정류장 수 K가 정해져 있다.
# 충전기가 설치된 M개의 정류장 번호가 주어질 때, 최소한 몇 번의 충전을 해야 종점에 도착할 수 있는지 출력하는 프로그램을 만드시오.
# 만약 충전기 설치가 잘못되어 종점에 도착할 수 없는 경우는 0을 출력한다. 출발지에는 항상 충전기가 설치되어 있지만 충전횟수에는 포함하지 않는다.
# 다음은 K = 3, N = 10, M = 5, 충전기가 설치된 정류장이 1, 3, 5, 7, 9인 경우의 예이다.

# [입력]
# 첫 줄에 노선 수 T가 주어진다.  ( 1 ≤ T ≤ 50 )
# 각 노선별로 K, N, M이 주어지고, 다음줄에 M개의 정류장 번호가 주어진다. ( 1 ≤ K, N, M ≤ 100 )

# [출력]
# #과 노선번호, 빈칸에 이어 최소 충전횟수 또는 0을 출력한다.

import sys
sys.stdin = open('파이썬 sw문제해결 기본-list1 6차시 1일차-전기버스.txt', 'r')

T = int(input())
for testcase in range(1, T+1):
    K, N, M = map(int, input().split())     # K는 이동거리, N는 마지막 정류장 번호 M는 충전소가 있는 정류장의 개수
    charge_stops = list(map(int, input().split()))  # 충전소의 위치를 리스트로 받음
    charge_stops.append(N)          # 충전소 리스트의 마지막에 마지막 정류장을 추가
    charge_stops.insert(0,0)        # 충전소 리스트의 처음에 출발 정류장인 0을 추가함.
    position = 0                    # 현재 내 위치
    count = 0                       # 충전소에서 충전한 횟수
    for i in range(1, M+2):         # 첫번째 충전소. 즉, 출발지는 볼필요가 없으니까, 그리고 마지막 정류장까지 추가되어서 총 M+2개의 정류장이 있음
        # 만약 충전소 간의 거리가 한 번에 이동가능거리인 K보다 크면 그건 안되는 거니까
        if charge_stops[i] - charge_stops[i-1] > K:
            count = 0                       # 이건 망한 운행표에요!!!
            break   # 애초에 이건 실패!!! 운행을 못해요!
        if charge_stops[i] > position + K:  # 현재 내 위치에서 K만큼 더해도 충전소에 못가면?
            count += 1                      # 충전을 한번 하고 가야지.
            position = charge_stops[i-1]    # 내 위치는 이전 충전소가 내 위치가 되지롱
        else:
            pass
    print(f'#{testcase} {count}')