주석 처리 안하면 가끔 시험이나 과제에서 감점처리되는 경우도 있으니 작성 자주자주 할 것
연산자에는 우선순위가 있으므로 괄호를 쓰자.
3//2*3을 다음과 같이 (3//2)*3

자료형 
숫자, 문자, 참거짓(논리형)

실수 연산시 주의할 점(부동 소수점)-해결책
import math
math.isclose(a,b))

문자열 자료형
우리는 ' '를 이용하는 것으로.
삼중 따옴표

Escapes sequence중요
봤을때 얘가 뭘말하는지는 알 수 있도록!
\0은 문자열이 끝났다는 표시를 나타내주는 것임(널 Null)

String Interpolation(문자열을 변수를 활용하여 만드는 법) 중요~
abcdefgh----- 는 불변형: 변경불가
a='hello'
a='aaa'
이 뒤의 값들을 말하는 것임 헷갈릴 수는 있지만 알고 있으면 된다.

name='Kim'
score=4.5
print(f'Hello, {naem}! 성적은 {score}'	#f 스트링이라 부르며 f를 작성해주고, 변수값은 {}안에 넣어주면 됨
#이 방식은 파이썬 3.6 이상에서만 사용 가능
#Hello, Kim! 성적은 4.5

None
-값이 없음을 표현하기 위해 None타입이 존재
-일반적으로 변환 값이 없는 함수에서 사용하기도 함

Boolean
논리 자료형으로 참과 거짓을 표현하는 자료형(True / False)→파이썬은 대문자T,F임을 인지.
예시로 if dust<50: 논리값이 들어가는 것.
is는 객체비교 ==는 값비교
is not 또한 객체비교 != 값비교

0+0
0-0
과 같은 연산에서 연산자가 아닌 녀석을 피연산자라 한다.
and or 는 논리 연산자라고 하며, 이때는 피연산자라 안하고 논리값이라 부른다.
and의 경우: 둘다 참이어야 참.
or의 경우: 둘 중 하나만 참이어도 참.
xor의 경우: 둘이 서로 다를 때만 참
and(&) or( | )

Not 은 피연산자가 하나. 단항 연산자.
피연산자의 논리값을 반대로 실행
(이게 피연산자의 값을 바꾸는 것은 아니다.)

숫자, 문자열, 논리값을 데이터로 사용할 수 있다.
#'숫자는 0, 비어있는 문자열'은 논리값으로 사용될 때 False!(숫자는 0빼고 다 True로 인식)
print(not 1) False
print(not 0) True

Falsy: False는 아니지만 False로 취급 되는 다양한 값
- 0, 0.0, (), [], {}, None, ""	(비어있는 문자열, 튜플, 리스트, 딕셔너리들이 그에 해당됨)

불린형
★시험에나옵니다!!!!!!!!
단축평가? 뒤쪽거는 볼필요도 없는 경우에 시행되는 평가
단축평가는 언제쓰나요~?
 arr=[10,20,30,40]
i → 0 1 2 3
arr[i] ← 4번 인덱스가 없으므로 인덱스 에러 발생
i < 4 and arr[i] 의 조건을 걸어주면 둘다 참이어야 실행
↑이렇게 되면 단축평가에 의해 에러가 발생하지 않는다.

컨테이너(데이터 덩어리를 컨테이너라고 표현)
데이터 여러개 담을 수 있는 객체를 컨테이너라고 함.
예 List, Dictionary 등
ordered, unordered
ABCDE
순서가 있다고 정렬된 것은 아님(ordered != sorted)
-순서가 있는 형: 시퀀스형(sequence)
-순서가 없는 형: 비시퀀스형

★시험문제로 나오기 좋죠★
가변형(리스트, 세트, 딕셔너리_의 경우 없애거나 추가하거나 값을 바꾸거나 가능
불변형(튜플, 레인지)의 경우 변경 안됨

리스트(가변형: 데이터 추가하거나 삭제 가능)
-리스트는 여러 개의 값을 순서가 있는 구조로 저장
0 1 2 3 4 ----

튜플(거의 리스트 형. 단, 불변자료형)
튜플은 여러 개의 값을 순서가 있는 구조로 저장하고 싶을 때 사용
항상 소괄호 형태로 사용
리스트는 [1,2,3,4] 식이라면 튜플은 (1,2,3,4) 식임
arr[0], tp[0] 이렇게 소환가능
하지만 arr[0]=3과 같은 tp[0]=3처럼 추가 삭제 변경하는 가변은 안됨

*range(시퀀스임, 불변형)
-숫자의 시퀀스를 나타내기 위해 사용
-주로 반복문과 함께 사용됨
range 사용방법
-range(n): 0~n-1까지
-range(1,n): 1~n-1까지
-range(n, m, step) n~m-1까지 step간격으로 n부터 생성

*슬라이싱 시퀀스를 특정 단위로 슬라이싱
- 인덱스와 콜론을 사용하여 문자열의 특정 부분만 잘라낼 수 있음.
-슬라이싱을 이용해 문자열을 나타낼 때 콜론을 기준으로 앞 인덱스에 해당하는 문자는 포함되지만 뒤 인덱스에 해당 문자는 미포함.

**비시퀀스형 컨테이너
*딕셔너리
-(key-value)쌍으로 이뤄진 자료형
-key는 변경 불가능한 데이터만 활용 가능(숫자 문자열 등)
  - string, integer, float, boolean, tuple, range
-각 키의 값(values)
  - 어떠한 형태든 관계없음

*형 변환
-암시적 형 변환(예: print(True+3)#4, print(3+5.0)#8.0)
  -암시적 형 변환의 기준은 데이터의 무손실!(데이터에 손실이 일어난다면 형 변환 일어나지 않음)
-명시적 형 변환
  - 개발자가 직접 지정해주는 것(float(), int(), str() 등)

*set
집합자료형
★중복되지 않는 데이터★를 가지는 자료형
a = {1,2,3}