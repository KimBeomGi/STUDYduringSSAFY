# 힌트 델타
# 힌트 오른쪽으로 먼저 갈건데 위치가 r:0 c:0에서 c에 1을 계속 더할텐데
# c의 범위를 벗어나면 방향을 바꾸면 됨(오른쪽에서 아래로)
# r에 1을 더하고, c는 그대로
# 또 아래끝이면

# 모듈러 연산을 이용해서  상하좌우 움직이기
# dr dc
# 0 1   0
# 1 0   1
# 0 -1  2
# -1 0  3

# cnt =4 cnt%4



# [문제]
# 달팽이는 1부터 N*N까지의 숫자가 시계방향으로 이루어져 있다.

# 다음과 같이 정수 N을 입력 받아 N크기의 달팽이를 출력하시오.


# [예제]

# N이 3일 경우,
# N이 4일 경우,

# [제약사항]
# 달팽이의 크기 N은 1 이상 10 이하의 정수이다. (1 ≤ N ≤ 10)

# [입력]
# 가장 첫 줄에는 테스트 케이스의 개수 T가 주어지고, 그 아래로 각 테스트 케이스가 주어진다.
# 각 테스트 케이스에는 N이 주어진다.

# [출력]
# 각 줄은 '#t'로 시작하고, 다음 줄부터 빈칸을 사이에 두고 달팽이 숫자를 출력한다.
# (t는 테스트 케이스의 번호를 의미하며 1부터 시작한다.)

#[문제풀이]
# 0. 오른쪽 갔다가 부딪히면 아래로 부딪히면 왼쪽으로 부딪히면 위로 부딪히면 오른쪽으로...
# 0-1. 시계방향 나선형으로 돌아가도록 하는 구조이다.
# 0-2. 그 돌아가는 순서대로 1번부터 N번까지 출력하는 구조이다.
# 1. N by N 개의 행렬 구조이다.
# 1-1. [0]*n개의 n개를 먼저 만들어 둔다.
# 1-2. 그리고 각 위치에 해당하는 곳을 하나씩 1,2,3,.... N-1, N으로 바꾸도록 해보자.
# 2. 가로로 갈때는 리스트[row][0] 리스트[row][1] 리스트[row][2] 가 움직이도록하고
# 2-1. 세로로 갈때는 리스트[0][column] 리스트[0][column] 리스트[0][column] 가 움직이도록하자.
# 3. 방향을 바꾸는 것은 반복문을 통해 기존에 0이 있었으므로 가려는 곳이 A 라면 0 < A라면 방향을 틀도록 하자.
# 3-1. 방향은 우하좌상으로 움직이므로 값을 미리 주고 %를 이용해 % = 0,% = 1,% = 2,% = 3,일때 각각 우하좌상이 되도록 해보는 것도 되겠다.


T = int(input())
for testcase in range(1,T+1):
    N = int(input())
    snail_matrix = [[0]*N for _ in range(N)]
    # 기본 매트릭스 구현 [[0,0,0],[0,0,0],[0,0,0]]과 같은 것

    #움직임은 우 하 좌 상
    dr = [0,1,0,-1]                                     # 행의 우 하 좌 상
    dc = [1,0,-1,0]                                     # 열의 우 하 좌 상
    dplay = 0                                           # 달팽이의 방향 움직임에 이용할 변수
    dmoveindex = dplay % 4                              # dplay 값이 변함에 따라 방향 전환 실시 하도록 하는 변수
    now_row = 0                                         # 현재 행의 좌표
    now_column = 0                                      # 현재 열의 좌표
    
    # 이하 달팽이 움직임 실시
    num = 1                                             # 최초 1부터 시작하므로.
    while num < (N**2)+1:                               # N^2 행이므로 while 반복문을 달팽이가 지나가면서 남길 숫자가 1~N^2까지 남기도록 함
        snail_matrix[now_row][now_column] = num         # 각 행의 열이 바뀌면서 해당 부분에 num이 들어가도록 하는 것

        # 만약 가려는 곳에 값이 0 이상이거나, 벽을 마주한다면(각 인덱스 값이 범위를 벗어나면) 방향을 전환해라.
        if (
            (now_row + dr[dmoveindex]) > (N-1) or                                     # 행이 현재위치에서 다음 위치로 넘어갈 때 N-1보다 크면(행을 넘어가면)
            (now_row + dr[dmoveindex]) < 0 or                                         # 행이 현재위치에서 다음 위치로 넘어갈 때 0보다 작으면
            (now_column + dc[dmoveindex]) > (N-1) or                                  # 열이 현재위치에서 다음 위치로 넘어갈 때 N-1보다 크면(열을 넘어가면)
            (now_column + dc[dmoveindex]) < 0 or                                      # 열이 현재위치에서 다음 위치로 넘어갈 때 0보다 작으면
            snail_matrix[now_row + dr[dmoveindex]][now_column + dc[dmoveindex]] > 0
):
            dplay += 1                                  # 달팽이의 방향 움직임에 이용할 변수
            dmoveindex = dplay % 4                      # dplay 값이 변함에 따라 방향 전환 실시 하도록 하는 변수

        now_row = now_row + dr[dmoveindex]              # 한 번 움직이고 다시 움직여야 하니까.(행 위치 변경)
        now_column = now_column + dc[dmoveindex]        # 한 번 움직이고 다시 움직여야 하니까.(열 위치 변경)
        num += 1                                        # 들어갈 숫자이자 while을 멈출 num을 반복문 돌때마다 1씩 증가시키기
    
    print(f'#{testcase}')                               # 테스트 케이스 먼저 출력
    for snail_matrix_row in snail_matrix:               # 이제 달팽이가 남기는 매트릭스를 출력해야하는데 매트릭스안 각 행(리스트) 별로 출력
        print(' '.join(map(str, snail_matrix_row)))