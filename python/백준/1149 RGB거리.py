# 문제
# RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

# 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

# 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
# N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
# 입력
# 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

# 출력
# 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

# 입력값
# 3
# 26 40 83
# 49 60 57
# 13 89 99

# 출력값
# 96

# 입력값
# 3
# 1 100 100
# 100 1 100
# 100 100 1

# 출력값
# 3

# 입력값
# 3
# 1 100 100
# 100 100 100
# 1 100 100
# 출력값
# 102
# 입력값
# 6
# 30 19 5
# 64 77 64
# 15 19 97
# 4 71 57
# 90 86 84
# 93 32 91f
# 출력값
# 208

# 입력값
# 8
# 71 39 44
# 32 83 55
# 51 37 63
# 89 29 100
# 83 58 11
# 65 13 15
# 47 25 29
# 60 66 19
# 출력값
# 253

# N = int(input())
# dp = [0]*N
# colors = [0]*N
# houses = []
# for _ in range(N):
#     a = list(map(int, input()))
#     houses.append(a)

# min_exp = 1000*N
# for i in range(1,4):
#     colors[0] = i       # 첫 집의 색을 무엇으로 할까나 1,2,3으로 색을 표현
#     for i in range(1, N):               #0~N-1번까지
#         pass




import sys

def solve(N, costs):
    # 각 집을 칠하는 비용의 최솟값을 저장할 dp 배열 생성
    dp = [[0] * 3 for _ in range(N)]
    
    # 초기 상태 설정: 첫 번째 집을 각각의 색으로 칠하는 비용
    dp[0] = costs[0]

    # 두 번째 집부터 마지막 집까지 반복하면서 최솟값 계산
    for i in range(1, N):
        # 현재 집을 빨강(R)으로 칠하는 경우
        dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + costs[i][0]

        # 현재 집을 초록(G)으로 칠하는 경우
        dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + costs[i][1]

        # 현재 집을 파랑(B)으로 칠하는 경우
        dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + costs[i][2]

    # 마지막 집을 칠한 후에는 세 가지 색 중에서 가장 작은 값을 선택
    return min(dp[N-1])

# 입력 받기
N = int(sys.stdin.readline())       # 집의 개수
costs = []                          # 각 집을 칠하는 비용을 저장할 리스트
for _ in range(N):
    costs.append(list(map(int, sys.stdin.readline().split())))

# 문제 해결 및 결과 출력
answer = solve(N, costs)
print(answer)